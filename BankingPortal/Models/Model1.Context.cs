//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BankingPortal.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BankPortalEntities : DbContext
    {
        public BankPortalEntities()
            : base("name=BankPortalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<balance> balances { get; set; }
        public virtual DbSet<Beneficiary> Beneficiaries { get; set; }
        public virtual DbSet<Registration> Registrations { get; set; }
        public virtual DbSet<TransactionInfo> TransactionInfoes { get; set; }
        public virtual DbSet<UserInfo> UserInfoes { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
    
        public virtual ObjectResult<fdate_Result> fdate(Nullable<System.DateTime> start, Nullable<System.DateTime> end)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<fdate_Result>("fdate", startParameter, endParameter);
        }
    
        public virtual int Fundtransfer(Nullable<long> senderAccountNumber, Nullable<long> receiverAccountNumber, Nullable<double> amount, string remark, string transferMode, Nullable<long> referenceId)
        {
            var senderAccountNumberParameter = senderAccountNumber.HasValue ?
                new ObjectParameter("SenderAccountNumber", senderAccountNumber) :
                new ObjectParameter("SenderAccountNumber", typeof(long));
    
            var receiverAccountNumberParameter = receiverAccountNumber.HasValue ?
                new ObjectParameter("ReceiverAccountNumber", receiverAccountNumber) :
                new ObjectParameter("ReceiverAccountNumber", typeof(long));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var transferModeParameter = transferMode != null ?
                new ObjectParameter("TransferMode", transferMode) :
                new ObjectParameter("TransferMode", typeof(string));
    
            var referenceIdParameter = referenceId.HasValue ?
                new ObjectParameter("ReferenceId", referenceId) :
                new ObjectParameter("ReferenceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Fundtransfer", senderAccountNumberParameter, receiverAccountNumberParameter, amountParameter, remarkParameter, transferModeParameter, referenceIdParameter);
        }
    
        public virtual ObjectResult<TransactionInfo> Funcdate(Nullable<System.DateTime> start, Nullable<System.DateTime> end)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionInfo>("Funcdate", startParameter, endParameter);
        }
    
        public virtual ObjectResult<TransactionInfo> Funcdate(Nullable<System.DateTime> start, Nullable<System.DateTime> end, MergeOption mergeOption)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionInfo>("Funcdate", mergeOption, startParameter, endParameter);
        }
    
        public virtual ObjectResult<balance> Functransfer(Nullable<long> senderAccountNumber, Nullable<long> receiverAccountNumber, Nullable<double> amount, string remark, string transferMode, Nullable<long> referenceId)
        {
            var senderAccountNumberParameter = senderAccountNumber.HasValue ?
                new ObjectParameter("SenderAccountNumber", senderAccountNumber) :
                new ObjectParameter("SenderAccountNumber", typeof(long));
    
            var receiverAccountNumberParameter = receiverAccountNumber.HasValue ?
                new ObjectParameter("ReceiverAccountNumber", receiverAccountNumber) :
                new ObjectParameter("ReceiverAccountNumber", typeof(long));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var transferModeParameter = transferMode != null ?
                new ObjectParameter("TransferMode", transferMode) :
                new ObjectParameter("TransferMode", typeof(string));
    
            var referenceIdParameter = referenceId.HasValue ?
                new ObjectParameter("ReferenceId", referenceId) :
                new ObjectParameter("ReferenceId", typeof(long));
            try
            {
                return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<balance>("Functransfer", senderAccountNumberParameter, receiverAccountNumberParameter, amountParameter, remarkParameter, transferModeParameter, referenceIdParameter);
            }
            catch
            {
                return null;
            }
            }
    
        public virtual ObjectResult<balance> Functransfer(Nullable<long> senderAccountNumber, Nullable<long> receiverAccountNumber, Nullable<double> amount, string remark, string transferMode, Nullable<long> referenceId, MergeOption mergeOption)
        {
            var senderAccountNumberParameter = senderAccountNumber.HasValue ?
                new ObjectParameter("SenderAccountNumber", senderAccountNumber) :
                new ObjectParameter("SenderAccountNumber", typeof(long));
    
            var receiverAccountNumberParameter = receiverAccountNumber.HasValue ?
                new ObjectParameter("ReceiverAccountNumber", receiverAccountNumber) :
                new ObjectParameter("ReceiverAccountNumber", typeof(long));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var transferModeParameter = transferMode != null ?
                new ObjectParameter("TransferMode", transferMode) :
                new ObjectParameter("TransferMode", typeof(string));
    
            var referenceIdParameter = referenceId.HasValue ?
                new ObjectParameter("ReferenceId", referenceId) :
                new ObjectParameter("ReferenceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<balance>("Functransfer", mergeOption, senderAccountNumberParameter, receiverAccountNumberParameter, amountParameter, remarkParameter, transferModeParameter, referenceIdParameter);
        }
    }
}
